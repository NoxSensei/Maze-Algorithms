(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7282],{69838:function(_,n,E){Promise.resolve().then(E.bind(E,87706))},35232:function(_,n,E){"use strict";E.d(n,{Z:function(){return R}});var e=E(57437),S=E(2265),t=E(56601),r=E(20920);function R(_){let{chart:n}=_,E=(0,S.useRef)(null);return(0,S.useEffect)(()=>{if(!(null!==E.current))return;t.N.initialize({startOnLoad:!0,theme:"neutral",logLevel:"error"});let _="chart-".concat(r.Z());t.N.render(_,n).then(_=>{E.current.innerHTML=_.svg})},[n]),(0,e.jsx)("div",{ref:E,style:{display:"flex",justifyContent:"center"}})}},87706:function(_,n,E){"use strict";E.r(n),E.d(n,{default:function(){return t}});var e=E(57437),S=E(35232);function t(){return(0,e.jsx)(S.Z,{chart:"flowchart TD\n    START([Start]) --> SET_GRID_SIZE[/Set grid size/]\n    SET_GRID_SIZE --> INITIALIZE_GRID[Initialize grid with all walls placed]\n    INITIALIZE_GRID --> SELECT_NEXT_ROW[Select next row]\n    SELECT_NEXT_ROW --> GENERATE_UNIQUE_GROUP_IDS[Generate unique group id for each node \n from current row being not assigned to any group]\n    \n    GENERATE_UNIQUE_GROUP_IDS --> SELECT_NEXT_CELL_FROM_ROW[Select next cell from the row]\n    \n    SELECT_NEXT_CELL_FROM_ROW --> IS_LAST_CELL\n    \n    IS_LAST_CELL{Is it the last cell in the row?}\n    IS_LAST_CELL -- Yes --> IS_LAST_ROW_2\n    IS_LAST_CELL -- No --> IS_EASTERN_NODE_IN_SAME_GROUP\n    \n    IS_EASTERN_NODE_IN_SAME_GROUP{Is eastern node in the same group \n as current one?}\n    IS_EASTERN_NODE_IN_SAME_GROUP -- Yes --> SELECT_NEXT_CELL_FROM_ROW\n    IS_EASTERN_NODE_IN_SAME_GROUP -- No --> IS_LAST_ROW_1\n    \n    IS_LAST_ROW_1{Is it the last row?}\n    IS_LAST_ROW_1 -- Yes --> REMOVE_EASTERN_WALL\n    IS_LAST_ROW_1 -- No --> SELECT_RANDOMLY\n    \n    SELECT_RANDOMLY[Select randomly whether event happens with a 50% chance]\n    SELECT_RANDOMLY --> IS_RANDOM_CHANCE_MET\n    \n    IS_RANDOM_CHANCE_MET{Is random chance met?}\n    IS_RANDOM_CHANCE_MET -- Yes --> REMOVE_EASTERN_WALL[Remove eastern wall]\n    IS_RANDOM_CHANCE_MET -- No --> SELECT_NEXT_CELL_FROM_ROW\n    \n    REMOVE_EASTERN_WALL --> ASSIGN_EASTERN_NODE[Assign all nodes from the second node's group \n to the first node's group]\n    ASSIGN_EASTERN_NODE --> SELECT_NEXT_CELL_FROM_ROW\n    \n    IS_LAST_ROW_2{Is it the last row?}\n    IS_LAST_ROW_2 -- No --> LIST_ALL_GROUPS[List all defined groups]\n    IS_LAST_ROW_2 -- Yes --> OUTPUT_GRID[/Return grid/]\n    \n    OUTPUT_GRID --> END([End])\n    \n    LIST_ALL_GROUPS --> SELECT_NEXT_GROUP[Select next unprocessed group]\n    SELECT_NEXT_GROUP --> SELECT_COUNT_OF_SOUTHERN_PASSAGES[Select randomly number of southern passages \n min: 1 \n max: count of the current group's nodes located in the most recent row]\n    \n    SELECT_COUNT_OF_SOUTHERN_PASSAGES --> CREATE_SOUTHERN_PASSAGES[Create southern passages for random nodes \n located in the most recent row from current group]\n    CREATE_SOUTHERN_PASSAGES --> ASSIGN_SOUTHERN_NODE[Assign freshly connected southern nodes to the current group]\n   \n    ASSIGN_SOUTHERN_NODE --> ARE_ALL_GROUPS_PROCESSED\n    \n    ARE_ALL_GROUPS_PROCESSED{Are all groups processed?}\n    ARE_ALL_GROUPS_PROCESSED -- Yes --> SELECT_NEXT_ROW\n    ARE_ALL_GROUPS_PROCESSED -- No --> SELECT_NEXT_GROUP\n"})}}},function(_){_.O(0,[9238,4496,2971,7023,1744],function(){return _(_.s=69838)}),_N_E=_.O()}]);