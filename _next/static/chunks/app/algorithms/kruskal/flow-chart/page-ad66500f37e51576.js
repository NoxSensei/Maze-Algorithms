(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9505],{30993:function(n,e,_){Promise.resolve().then(_.bind(_,55986))},35232:function(n,e,_){"use strict";_.d(e,{Z:function(){return A}});var t=_(57437),E=_(2265),r=_(56601),L=_(20920);function A(n){let{chart:e}=n,_=(0,E.useRef)(null);return(0,E.useEffect)(()=>{if(!(null!==_.current))return;r.N.initialize({startOnLoad:!0,theme:"neutral",logLevel:"error"});let n="chart-".concat(L.Z());r.N.render(n,e).then(n=>{_.current.innerHTML=n.svg})},[e]),(0,t.jsx)("div",{ref:_,style:{display:"flex",justifyContent:"center"}})}},55986:function(n,e,_){"use strict";_.r(e),_.d(e,{default:function(){return r}});var t=_(57437),E=_(35232);function r(){return(0,t.jsx)(E.Z,{chart:"flowchart TD\n    START([Start]) --> SET_GRID_SIZE[/Set grid size/]\n    SET_GRID_SIZE --> INITIALIZE_GRID[Initialize grid with all walls placed]\n    INITIALIZE_GRID --> GENERATE_UNIQUE_GROUP_IDS[Generate unique group id for each node]\n    GENERATE_UNIQUE_GROUP_IDS --> LIST_ALL_WALLS[Prepare list of all internal walls]\n    LIST_ALL_WALLS --> ARE_ALL_WALLS_PROCESSED\n    \n    ARE_ALL_WALLS_PROCESSED[Are all walls processed?]\n    ARE_ALL_WALLS_PROCESSED -- Yes -->  OUTPUT_GRID[/Return grid/]\n    ARE_ALL_WALLS_PROCESSED -- No --> SELECT_RANDOM_WALL[Select next unprocessed internal wall at random]\n    \n    OUTPUT_GRID --> END([End])\n    \n    SELECT_RANDOM_WALL --> ARE_IN_THE_SAME_GROUP\n    ARE_IN_THE_SAME_GROUP{Are nodes at both sides of the wall \n in the same group?}\n    ARE_IN_THE_SAME_GROUP -- Yes --> ARE_ALL_WALLS_PROCESSED\n    ARE_IN_THE_SAME_GROUP -- No --> REMOVE_WALL[Remove wall]\n    \n    REMOVE_WALL --> ASSIGN_TO_THE_SAME_GROUP[Assign all nodes from the first node's group \n to the second node's group]\n    \n    ASSIGN_TO_THE_SAME_GROUP --> ARE_ALL_WALLS_PROCESSED\n"})}}},function(n){n.O(0,[9238,4496,2971,7023,1744],function(){return n(n.s=30993)}),_N_E=n.O()}]);