(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[399],{7854:function(n,e,E){Promise.resolve().then(E.bind(E,83285))},35232:function(n,e,E){"use strict";E.d(e,{Z:function(){return T}});var t=E(57437),_=E(2265),r=E(56601),S=E(20920);function T(n){let{chart:e}=n,E=(0,_.useRef)(null);return(0,_.useEffect)(()=>{if(!(null!==E.current))return;r.N.initialize({startOnLoad:!0,theme:"neutral",logLevel:"error"});let n="chart-".concat(S.Z());r.N.render(n,e).then(n=>{E.current.innerHTML=n.svg})},[e]),(0,t.jsx)("div",{ref:E,style:{display:"flex",justifyContent:"center"}})}},83285:function(n,e,E){"use strict";E.r(e),E.d(e,{default:function(){return r}});var t=E(57437),_=E(35232);function r(){return(0,t.jsx)(_.Z,{chart:'flowchart TD\n    %% Definitions\n\n    START([Start])\n    SET_GRID_SIZE[/Define grid size/]\n    INIT_GRID[Initialize grid with all walls]\n    CHOOSE_START[Choose a random starting cell]\n\n    DFS_START[Begin DFS Walk]\n\n    VISIT_CELL[Mark current cell as visited]\n    SHUFFLE_DIRS["Shuffle directions (N, S, E, W)"]\n    CHECK_NEIGHBOURS{Have all directions<br>been checked?}\n    NEXT_DIRECTION[Pick next unchecked direction]\n\n    OUT_OF_BOUNDS{Is target cell<br>outside grid?}\n    ALREADY_VISITED{Has target cell<br>been visited?}\n\n    CARVE_PASSAGE[Remove wall between current and target cell]\n    MOVE_TO_TARGET[Move to target cell]\n\n    BACKTRACK[Backtrack to previous<br>unresolved cell]\n    ALL_CELLS_VISITED{Are all cells visited?}\n    RETURN_MAZE[/Return final maze/]\n    END([End])\n\n    %% Flow\n\n    START --> SET_GRID_SIZE\n    SET_GRID_SIZE --> INIT_GRID\n    INIT_GRID --> CHOOSE_START\n    CHOOSE_START --> DFS_START\n\n    DFS_START --> VISIT_CELL\n    VISIT_CELL --> SHUFFLE_DIRS\n    SHUFFLE_DIRS --> CHECK_NEIGHBOURS\n\n    CHECK_NEIGHBOURS -- No --> NEXT_DIRECTION\n    NEXT_DIRECTION --> OUT_OF_BOUNDS\n    OUT_OF_BOUNDS -- Yes --> CHECK_NEIGHBOURS\n    OUT_OF_BOUNDS -- No --> ALREADY_VISITED\n\n    ALREADY_VISITED -- Yes --> CHECK_NEIGHBOURS\n    ALREADY_VISITED -- No --> CARVE_PASSAGE\n    CARVE_PASSAGE --> MOVE_TO_TARGET\n    MOVE_TO_TARGET --> VISIT_CELL\n\n    CHECK_NEIGHBOURS -- Yes --> ALL_CELLS_VISITED\n\n    ALL_CELLS_VISITED -- Yes --> RETURN_MAZE\n    RETURN_MAZE --> END\n\n    ALL_CELLS_VISITED -- No --> BACKTRACK\n    BACKTRACK --> CHECK_NEIGHBOURS\n'})}}},function(n){n.O(0,[9238,4496,2971,7023,1744],function(){return n(n.s=7854)}),_N_E=n.O()}]);